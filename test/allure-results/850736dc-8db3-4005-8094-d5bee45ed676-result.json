{"name": "test_register_form", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: invalid argument: File not found : C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\mid_level_step_objects\\resources\\picture.png\n  (Session info: chrome=125.0.6422.60)\nScreenshot: file://C:\\Users\\Home\\.selene\\screenshots\\1741188509156\\1741188509156.png\nPageSource: file://C:\\Users\\Home\\.selene\\screenshots\\1741188509156\\1741188509156.html", "trace": "fn = <selene.core.wait.Command object at 0x00000218E76D5A80>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\.venv\\lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\.venv\\lib\\site-packages\\selene\\core\\wait.py:61: in __call__\n    return self._fn(entity)\n..\\.venv\\lib\\site-packages\\selene\\core\\entity.py:469: in <lambda>\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:303: in send_keys\n    self._execute(\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x00000218E76D6380>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument: File not found : C:\\\\\\\\Use...\\\\n#16 0x558e0423938b \\\\u003Cunknown>\\\\n#17 0x558e04248ffc \\\\u003Cunknown>\\\\n#18 0x7f8b7f177ac3 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument: File not found : C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\mid_level_step_objects\\resources\\picture.png\nE         (Session info: chrome=125.0.6422.60)\nE       Stacktrace:\nE       #0 0x558e04249eca <unknown>\nE       #1 0x558e03f3345c <unknown>\nE       #2 0x558e03f779bd <unknown>\nE       #3 0x558e03fa24b2 <unknown>\nE       #4 0x558e03f73a79 <unknown>\nE       #5 0x558e03fa267e <unknown>\nE       #6 0x558e03fc12cc <unknown>\nE       #7 0x558e03fa2253 <unknown>\nE       #8 0x558e03f721c7 <unknown>\nE       #9 0x558e03f72b3e <unknown>\nE       #10 0x558e0421030b <unknown>\nE       #11 0x558e042143b7 <unknown>\nE       #12 0x558e041fce3e <unknown>\nE       #13 0x558e04214e82 <unknown>\nE       #14 0x558e041e17df <unknown>\nE       #15 0x558e042391b8 <unknown>\nE       #16 0x558e0423938b <unknown>\nE       #17 0x558e04248ffc <unknown>\nE       #18 0x7f8b7f177ac3 <unknown>\n\n..\\.venv\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidArgumentException\n\nDuring handling of the above exception, another exception occurred:\n\n    def test_register_form():\n        registration_form = RegistrationPage()\n    \n        registration_page = RegistrationPage()\n        registration_page.open()\n        registration_page.set_firstname(\"Maxim\")\n        registration_page.set_lastname(\"Lerich\")\n        registration_page.set_email(\"alab@mail.me\")\n        registration_page.set_gender(2)\n        registration_page.set_phone(\"3123213131\")\n        registration_page.set_birthday(\"5\", \"1990\", \"15\")\n        registration_page.scroll_page()\n        registration_page.set_subjects(\"Maths\", \"English\")\n        registration_page.set_hobby(1)\n>       registration_page.upload_picture(\"picture.png\")\n\ntest_demoqa.py:18: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\mid_level_step_objects\\page.py:55: in upload_picture\n    browser.element('#uploadPicture').send_keys(os.path.join(os.path.dirname(__file__), \"resources\", \"picture.png\"))\n..\\.venv\\lib\\site-packages\\selene\\core\\entity.py:469: in send_keys\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\n..\\.venv\\lib\\site-packages\\selene\\core\\wait.py:161: in command\n    self.for_(Command(description, fn))\n..\\.venv\\lib\\site-packages\\selene\\core\\wait.py:150: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x00000218E76D5A80>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=getattr(reason, \"msg\", str(reason)),\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    # TODO: should we have an option to turn on stacktrace logging?\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    # if it's a normal function, it should have __qualname__,\n                    # then use it, otherwise use str(fn)\n                    fn_name = getattr(\n                        fn,\n                        '__qualname__',\n                        getattr(fn, '__str__', lambda: str(fn))(),\n                    )\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn_name}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '#uploadPicture')).send keys\nE                   \nE                   Reason: InvalidArgumentException: invalid argument: File not found : C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\mid_level_step_objects\\resources\\picture.png\nE                     (Session info: chrome=125.0.6422.60)\nE                   Screenshot: file://C:\\Users\\Home\\.selene\\screenshots\\1741188509156\\1741188509156.png\nE                   PageSource: file://C:\\Users\\Home\\.selene\\screenshots\\1741188509156\\1741188509156.html\n\n..\\.venv\\lib\\site-packages\\selene\\core\\wait.py:148: TimeoutException"}, "steps": [{"name": "Открываем страницу регистрации", "status": "passed", "start": 1741188513023, "stop": 1741188515307}, {"name": "Вводим имя: 'Maxim'", "status": "passed", "parameters": [{"name": "value", "value": "'Maxim'"}], "start": 1741188515307, "stop": 1741188515478}, {"name": "Вводим фамилию: 'Lerich'", "status": "passed", "parameters": [{"name": "value", "value": "'Lerich'"}], "start": 1741188515478, "stop": 1741188515628}, {"name": "Вводим email: 'alab@mail.me'", "status": "passed", "parameters": [{"name": "email", "value": "'alab@mail.me'"}], "start": 1741188515628, "stop": 1741188515788}, {"name": "Выбираем пол: 2", "status": "passed", "parameters": [{"name": "gender_value", "value": "2"}], "start": 1741188515788, "stop": 1741188515932}, {"name": "Вводим телефон: '3123213131'", "status": "passed", "parameters": [{"name": "phone", "value": "'3123213131'"}], "start": 1741188515932, "stop": 1741188516087}, {"name": "Устанавливаем дату рождения: '15'.'5'.'1990'", "status": "passed", "parameters": [{"name": "month", "value": "'5'"}, {"name": "year", "value": "'1990'"}, {"name": "day", "value": "'15'"}], "start": 1741188516087, "stop": 1741188516740}, {"name": "Скроллим страницу", "status": "passed", "start": 1741188516741, "stop": 1741188516793}, {"name": "Вводим предметы: ('Maths', 'English')", "status": "passed", "parameters": [{"name": "subjects", "value": "('Maths', 'English')"}], "start": 1741188516793, "stop": 1741188517413}, {"name": "Выбираем хобби: 1", "status": "passed", "parameters": [{"name": "hobby_value", "value": "1"}], "start": 1741188517413, "stop": 1741188517581}, {"name": "Загружаем изображение ", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '#uploadPicture')).send keys\n\nReason: InvalidArgumentException: invalid argument: File not found : C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\mid_level_step_objects\\resources\\picture.png\n  (Session info: chrome=125.0.6422.60)\nScreenshot: file://C:\\Users\\Home\\.selene\\screenshots\\1741188509156\\1741188509156.png\nPageSource: file://C:\\Users\\Home\\.selene\\screenshots\\1741188509156\\1741188509156.html\n\n", "trace": "  File \"C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\.venv\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\mid_level_step_objects\\page.py\", line 55, in upload_picture\n    browser.element('#uploadPicture').send_keys(os.path.join(os.path.dirname(__file__), \"resources\", \"picture.png\"))\n  File \"C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\.venv\\lib\\site-packages\\selene\\core\\entity.py\", line 469, in send_keys\n    self.wait.command('send keys', lambda element: element().send_keys(*value))\n  File \"C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\.venv\\lib\\site-packages\\selene\\core\\wait.py\", line 161, in command\n    self.for_(Command(description, fn))\n  File \"C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\.venv\\lib\\site-packages\\selene\\core\\wait.py\", line 150, in for_\n    return self._decorator(self)(logic)(fn)\n  File \"C:\\Users\\Home\\PycharmProjects\\test_home_qaQURU\\.venv\\lib\\site-packages\\selene\\core\\wait.py\", line 148, in logic\n    raise self._hook_failure(failure)\n"}, "parameters": [{"name": "file_path", "value": "'picture.png'"}], "start": 1741188517582, "stop": 1741188522289}], "start": 1741188513023, "stop": 1741188522291, "uuid": "037749a3-6354-49f1-8a70-bd86b3489ea0", "historyId": "c69c07d698f777e311ebcbbb16afc6bf", "testCaseId": "c69c07d698f777e311ebcbbb16afc6bf", "fullName": "test.test_demoqa#test_register_form", "labels": [{"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_demoqa"}, {"name": "host", "value": "WIN-SN3654HC5MA"}, {"name": "thread", "value": "16660-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_demoqa"}]}